Index: src/server/Server.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include \"Server.h\"\n#include <chrono>\n#include <thread>\n#include \"../common/protocols/InputProtocol.h\"\n\nServer::Server(char* port, int playersAmount, Config& config, Logger& logger) :\n    ip(c_str(\"127.0.0.1\")),\n    port(port),\n    playersAmount(playersAmount),\n    game(config, logger),\n    sktListener(),\n    config(config),\n    logger(logger)\n{}\n\nvoid Server::run(){\n    sktListener.bind(ip, port);\n    sktListener.listen(playersAmount);\n\n    acceptClients();\n    sktListener.shutdown();\n    startGame();\n}\n\nvoid Server::sendAll(){\n    const std::vector<Entity>& entities = game.getEntities();\n    const std::vector<Character>& characters = game.getPlayers();\n\n    for(int i = 0; i < playersAmount; i++){\n        for(int j = 0; j < entities.size(); j++){\n            clients[i].send(entities[j]);\n        }\n        for(int j = 0; j < characters.size(); i++){\n            clients[i].send(characters[j]);\n        }\n        clients[i].sendBreak();\n    }\n}\n\nvoid Server::sendNew(){\n    const std::vector<Entity>& entities = game.getEntities();\n    const std::vector<Character>& players = game.getPlayers();\n\n    for(int i = 0; i < playersAmount; i++){\n        for(int j = 0; j < entities.size(); j++){\n            char c = entities[j].getPermanency();\n            if(c == '0'){\n                clients[i].send(entities[j]);\n            }\n        }\n        for(int j = 0; j < characters.size(); i++){\n            clients[i].send(characters[i]);\n        }\n        clients[i].sendBreak();\n    }\n}\n\nvoid Server::startGame(){\n    sendAll();\n    std::chrono::milliseconds frameTime(30);\n\n    bool finish = false;\n    while(!finish) {\n        std::chrono::steady_clock::time_point initialTime = std::chrono::steady_clock::now();\n        std::chrono::steady_clock::time_point timeSpan = initialTime + frameTime;\n        for (int i = 0; i < playersAmount; i++) {\n            while (clients[i].hasIncoming()) {\n                char command = clients[i].receive();\n                makeCommand(c,i);\n            }\n        }\n        game.update();\n        finish = game.isFinished();\n        sendNew();\n        std::this_thread::sleep_until(timeSpan);\n    }\n}\n\nvoid Server::acceptClients(){\n    std::vector<LoginManager*> logins;\n    for(int i = 0; i != playersAmount; i++){\n        Socket clientSkt = std::move(sktListener.accept());\n        Peer client(std::move(clientSkt));\n        clients.push_back(client);\n        logins.push_back(new LoginManager(clients));\n    }\n\n    std::vector<LoginManager*>::iterator it = logins.begin();\n    while (it != logins.end()){\n        (*it)->join();\n        delete *it;\n        it = processors.erase(it);\n    }\n}\n\nbool Server::validateClient(Socket& skt){\n    char user[30];\n    char password[30];\n    char response[1]; //F for fail - G for good\n\n    if(skt.receive(user,30) < 1) return false;\n    if(skt.receive(password,30) < 1) return false;\n\n    std::string usr(user);\n    std::string pw(password);\n\n    if(usersKeys[usr] != pw){\n        response[0] = 'F';\n        skt.send(buffer,1);\n        return false;\n    }\n    response[0] = 'G';\n    skt.send(buffer,1);\n    return true;\n}\n\nvoid Server::makeCommand(char& command,int& i){\n    switch(command) {\n        case PRESS_UP:\n            logger.debugMsg(\"Se presiona boton UP\", __FILE__, __LINE__);\n            game.startMovingUp(i);\n            break;\n        case PRESS_DOWN:\n            logger.debugMsg(\"Se presiona boton DOWN\", __FILE__, __LINE__);\n            game.startMovingDown(i);\n            break;\n        case PRESS_LEFT:\n            logger.debugMsg(\"Se presiona boton LEFT\", __FILE__, __LINE__);\n            game.startMovingLeft(i);\n            break;\n        case PRESS_RIGHT:\n            logger.debugMsg(\"Se presiona boton RIGHT\", __FILE__, __LINE__);\n            game.startMovingRight(i);\n            break;\n        case PRESS_JUMP:\n            logger.debugMsg(\"Se presiona boton SPACE\", __FILE__, __LINE__);\n            game.startJumping(i);\n            break;\n        case RELEASE_UP:\n            logger.debugMsg(\"Se libera boton UP\", __FILE__, __LINE__);\n            game.stopMovingUp(i);\n            break;\n        case RELEASE_DOWN:\n            logger.debugMsg(\"Se libera boton DOWN\", __FILE__, __LINE__);\n            game.stopMovingDown(i);\n            break;\n        case RELEASE_LEFT:\n            logger.debugMsg(\"Se libera boton LEFT\", __FILE__, __LINE__);\n            game.stopMovingLeft(i);\n            break;\n        case RELEASE_RIGHT:\n            logger.debugMsg(\"Se libera boton RIGHT\", __FILE__, __LINE__);\n            game.stopMovingRight(i);\n            break;\n        case RELEASE_JUMP:\n            logger.debugMsg(\"Se libera boton SPACE\", __FILE__, __LINE__);\n            game.stopJumping(i);\n            break;\n        default:\n            break;\n    }\n}\n\nServer::~Server() {}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/server/Server.cpp b/src/server/Server.cpp
--- a/src/server/Server.cpp	(revision ba26ea46be9629493110a584aaf88cb064bd1698)
+++ b/src/server/Server.cpp	(date 1623447337695)
@@ -82,7 +82,9 @@
         Socket clientSkt = std::move(sktListener.accept());
         Peer client(std::move(clientSkt));
         clients.push_back(client);
-        logins.push_back(new LoginManager(clients));
+        LoginManager* login = new LoginManager(clients);
+        login->start();
+        logins.push_back(login);
     }
 
     std::vector<LoginManager*>::iterator it = logins.begin();
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision ba26ea46be9629493110a584aaf88cb064bd1698)
+++ /dev/null	(revision ba26ea46be9629493110a584aaf88cb064bd1698)
@@ -1,8 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
-# Datasource local storage ignored files
-/dataSources/
-/dataSources.local.xml
-# Editor-based HTTP Client requests
-/httpRequests/
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ProjectModuleManager\">\n    <modules>\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/DonkeyKong.iml\" filepath=\"$PROJECT_DIR$/.idea/DonkeyKong.iml\" />\n      <module fileurl=\"file://$PROJECT_DIR$/.idea/Taller-Prog-I-2021-1C-Chipa.iml\" filepath=\"$PROJECT_DIR$/.idea/Taller-Prog-I-2021-1C-Chipa.iml\" />\n    </modules>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	(revision ba26ea46be9629493110a584aaf88cb064bd1698)
+++ b/.idea/modules.xml	(date 1623423652079)
@@ -2,7 +2,6 @@
 <project version="4">
   <component name="ProjectModuleManager">
     <modules>
-      <module fileurl="file://$PROJECT_DIR$/.idea/DonkeyKong.iml" filepath="$PROJECT_DIR$/.idea/DonkeyKong.iml" />
       <module fileurl="file://$PROJECT_DIR$/.idea/Taller-Prog-I-2021-1C-Chipa.iml" filepath="$PROJECT_DIR$/.idea/Taller-Prog-I-2021-1C-Chipa.iml" />
     </modules>
   </component>
diff --git a/.idea/DonkeyKong.iml b/.idea/Taller-Prog-I-2021-1C-Chipa.iml
rename from .idea/DonkeyKong.iml
rename to .idea/Taller-Prog-I-2021-1C-Chipa.iml
